package elgamal

import (
	"crypto/rand"
	enginev1 "github.com/prysmaticlabs/prysm/v3/proto/engine/v1"
	"io"
	"math/big"
)

type PublicKey struct {
	G,
	P,
	Y *big.Int
}

type PrivateKey struct {
	PublicKey
	X *big.Int
}

func Encrypt(random io.Reader, pub *PublicKey, msg []byte) (a, b *big.Int, err error) {

	k, err := rand.Int(random, pub.P)
	if err != nil {
		panic(err)
	}

	m := new(big.Int).SetBytes(msg)

	a = new(big.Int).Exp(pub.G, k, pub.P)
	s := new(big.Int).Exp(pub.Y, k, pub.P)
	b = s.Mul(s, m)
	b.Mod(b, pub.P)

	return
}

func Decrypt(priv *PrivateKey, a, b *big.Int) (msg []byte, err error) {
	s := new(big.Int).Exp(a, priv.X, priv.P)
	s.ModInverse(s, priv.P)
	s.Mul(s, b)
	s.Mod(s, priv.P)
	em := s.Bytes()

	return em, nil
}

func ImportPublicKey() *enginev1.ElgamalPublicKey {
	pub := &enginev1.ElgamalPublicKey{
		G: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02},
		Y: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00},
		P: []byte{0x5a, 0xbf, 0x93, 0xea, 0x1b, 0xb5, 0x17, 0xb8, 0x88, 0x54, 0x81, 0xe5, 0x00, 0xf4, 0x6b, 0xf3, 0x38, 0xab, 0x3a, 0xe1, 0xa0, 0x2e, 0xbe, 0x45, 0x95, 0x27, 0xc8, 0x24, 0x7d, 0xf5, 0xf5, 0xd1, 0x2d, 0x40, 0xba, 0xd8, 0xdd, 0x83, 0x48, 0x20, 0xc5, 0xbf, 0x7e, 0xe2, 0x3e, 0xfd, 0xaf, 0x8f, 0x6e, 0x04, 0x96, 0x8e, 0xa3, 0x23, 0xd6, 0x56, 0x58, 0x92, 0x12, 0xbb, 0x8c, 0x88, 0x53, 0x64, 0xb4, 0x8b, 0xa8, 0xe5, 0xcb, 0x05, 0x18, 0x71, 0x27, 0xfb, 0x19, 0x63, 0xde, 0xfd, 0xfb, 0x3d, 0xbe, 0xef, 0xaa, 0x0c, 0xad, 0x61, 0xdd, 0xd1, 0x86, 0x1e, 0xad, 0xaa, 0x03, 0x6e, 0xdc, 0xab, 0x59, 0xd1, 0x57, 0x5a, 0x0a, 0x8b, 0x1f, 0xf9, 0x1b, 0x12, 0x5e, 0x4a, 0x83, 0x00, 0x51, 0xaa, 0xb9, 0x8e, 0xa2, 0x8e, 0x5c, 0xde, 0x58, 0x09, 0xf0, 0x6d, 0x75, 0x1a, 0x06, 0xd0, 0x57, 0x10, 0xda, 0x0b, 0x68, 0xaa, 0x56, 0x87, 0x29, 0xd7, 0x27, 0x2b, 0xf9, 0x2c, 0x97, 0x1f, 0x8c, 0x09, 0x41, 0x7b, 0xa9, 0xcf, 0xc4, 0xba, 0x96, 0x2e, 0x04, 0x1f, 0x15, 0xa1, 0xc9, 0xff, 0x08, 0x1d, 0x2e, 0xa5, 0xc3, 0x15, 0xe4, 0xab, 0xf7, 0xdb, 0xc3, 0xa8, 0x3a, 0x0a, 0x94, 0x48, 0x58, 0xbb, 0x67, 0x54, 0x72, 0x82, 0x3a, 0xe6, 0x7e, 0x76, 0x76, 0xcb, 0x14, 0xa3, 0xd7, 0x11, 0xe2, 0x54, 0x3d, 0x98, 0x3e, 0x31, 0x4e, 0xf7, 0x62, 0x54, 0xa7, 0x40, 0xea, 0x71, 0x90, 0xb0, 0xef, 0x26, 0xcd, 0xbd, 0x14, 0x6d, 0x5b, 0x79, 0xa1, 0x80, 0x99, 0x5e, 0x44, 0xc4, 0x0c, 0xcd, 0x93, 0x54, 0x68, 0xd0, 0x2d, 0xad, 0x47, 0x5b, 0xa6, 0x5d, 0xe2, 0x9f, 0xc6, 0x4b, 0xc3, 0x5b, 0x6c, 0xfa, 0xa4, 0x91, 0xc7, 0x5e, 0x10, 0xcc, 0x12, 0xbc, 0x39, 0xfa, 0xbc, 0xdd, 0x2d, 0x03, 0xd1, 0x3f, 0x39, 0xe7, 0x3f, 0x37, 0xb8, 0x2c, 0x2d, 0x4f, 0x80, 0x8e, 0xf2, 0x09, 0x8f, 0xd9, 0x21, 0xfc, 0xb6, 0x9e, 0xef, 0xf5, 0x59, 0x3b, 0x92, 0xa5, 0x13, 0x09, 0x43, 0x9a, 0xb3, 0x07, 0xe1, 0xf7, 0x60, 0x68, 0xf1, 0xa8, 0x62, 0xdc, 0xa0, 0x39, 0x9b, 0x7e, 0x63, 0x3f, 0x2f, 0x75, 0xe3, 0x9f, 0x97, 0xe7, 0x73, 0x28, 0x49, 0xef, 0xc6, 0x9f, 0x78, 0xa0, 0x4e, 0x93, 0x55, 0x5a, 0xdf, 0x8b, 0x8c, 0x5e, 0xa2, 0x78, 0xb7, 0x13, 0xe9, 0xc3, 0x22, 0x82, 0x64, 0x33, 0xe4, 0x15, 0x4b, 0x9f, 0xc2, 0x43, 0xd0, 0x9f, 0x4d, 0x71, 0xbd, 0xc2, 0x87, 0xaf, 0xd9, 0xb0, 0xb5, 0xa8, 0x61, 0xd1, 0x5b, 0x66, 0x96, 0x88, 0x21, 0x53, 0x2d, 0x5d, 0xbd, 0xb5, 0xe5, 0xe7, 0xa8, 0xe1, 0x52, 0xa2, 0xf2, 0xa1, 0xa6, 0x1e, 0xb1, 0xb4, 0x83, 0xe2, 0x5b, 0xf4, 0x6b, 0x2a, 0xf4, 0x15, 0xb1, 0xe1, 0xa7, 0x3c, 0x14, 0x94, 0x2c, 0x18, 0x94, 0x22, 0x14, 0x7f, 0xea, 0xab, 0xc4, 0xc5, 0x67, 0x95, 0xe5, 0x22, 0x86, 0xba, 0x07, 0x03, 0x49, 0xca, 0xc7, 0xbc, 0xfe, 0x58, 0x83, 0x71, 0xcf, 0xf1, 0x90, 0x7f, 0xdb, 0xbb, 0x4c, 0x2b, 0xb8, 0x6e, 0xee, 0xdc, 0x25, 0x0a, 0xf2, 0x77, 0xb8, 0x2e, 0xf6, 0xc8, 0x8a, 0xd0, 0xbf, 0x2c, 0x13, 0x8e, 0x83, 0xdb, 0x90, 0x3b, 0xf8, 0x32, 0xcc, 0xc8, 0xf9, 0xfd, 0xf9, 0x5e, 0x24, 0x45, 0x34, 0x2d, 0x8a, 0x9f, 0xef, 0xd5, 0x91, 0x47, 0x8d, 0x01, 0x11, 0x58, 0xcd, 0x2a, 0x99, 0xfd, 0xa4, 0xab, 0xba, 0xd1, 0x9e, 0x7c, 0x84, 0x0b, 0x58, 0x73, 0x66, 0xcd, 0xbe, 0x1c, 0x44, 0x30, 0xb4, 0x22, 0x8f, 0xe1, 0x48, 0xda, 0x96, 0xfe, 0x3b, 0x60, 0x68, 0x59, 0xe5, 0x4f, 0x4d, 0x9f, 0x89, 0x25, 0xe0, 0x77, 0x34, 0x8f, 0xe3, 0xb7, 0xc8, 0xd9},
	}
	return pub
}
func PlaceHolderPublicKey() *enginev1.ElgamalPublicKey {
	pub := &enginev1.ElgamalPublicKey{
		G: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02},
		P: []byte{0x5a, 0xbf, 0x93, 0xea, 0x1b, 0xb5, 0x17, 0xb8, 0x88, 0x54, 0x81, 0xe5, 0x00, 0xf4, 0x6b, 0xf3, 0x38, 0xab, 0x3a, 0xe1, 0xa0, 0x2e, 0xbe, 0x45, 0x95, 0x27, 0xc8, 0x24, 0x7d, 0xf5, 0xf5, 0xd1, 0x2d, 0x40, 0xba, 0xd8, 0xdd, 0x83, 0x48, 0x20, 0xc5, 0xbf, 0x7e, 0xe2, 0x3e, 0xfd, 0xaf, 0x8f, 0x6e, 0x04, 0x96, 0x8e, 0xa3, 0x23, 0xd6, 0x56, 0x58, 0x92, 0x12, 0xbb, 0x8c, 0x88, 0x53, 0x64, 0xb4, 0x8b, 0xa8, 0xe5, 0xcb, 0x05, 0x18, 0x71, 0x27, 0xfb, 0x19, 0x63, 0xde, 0xfd, 0xfb, 0x3d, 0xbe, 0xef, 0xaa, 0x0c, 0xad, 0x61, 0xdd, 0xd1, 0x86, 0x1e, 0xad, 0xaa, 0x03, 0x6e, 0xdc, 0xab, 0x59, 0xd1, 0x57, 0x5a, 0x0a, 0x8b, 0x1f, 0xf9, 0x1b, 0x12, 0x5e, 0x4a, 0x83, 0x00, 0x51, 0xaa, 0xb9, 0x8e, 0xa2, 0x8e, 0x5c, 0xde, 0x58, 0x09, 0xf0, 0x6d, 0x75, 0x1a, 0x06, 0xd0, 0x57, 0x10, 0xda, 0x0b, 0x68, 0xaa, 0x56, 0x87, 0x29, 0xd7, 0x27, 0x2b, 0xf9, 0x2c, 0x97, 0x1f, 0x8c, 0x09, 0x41, 0x7b, 0xa9, 0xcf, 0xc4, 0xba, 0x96, 0x2e, 0x04, 0x1f, 0x15, 0xa1, 0xc9, 0xff, 0x08, 0x1d, 0x2e, 0xa5, 0xc3, 0x15, 0xe4, 0xab, 0xf7, 0xdb, 0xc3, 0xa8, 0x3a, 0x0a, 0x94, 0x48, 0x58, 0xbb, 0x67, 0x54, 0x72, 0x82, 0x3a, 0xe6, 0x7e, 0x76, 0x76, 0xcb, 0x14, 0xa3, 0xd7, 0x11, 0xe2, 0x54, 0x3d, 0x98, 0x3e, 0x31, 0x4e, 0xf7, 0x62, 0x54, 0xa7, 0x40, 0xea, 0x71, 0x90, 0xb0, 0xef, 0x26, 0xcd, 0xbd, 0x14, 0x6d, 0x5b, 0x79, 0xa1, 0x80, 0x99, 0x5e, 0x44, 0xc4, 0x0c, 0xcd, 0x93, 0x54, 0x68, 0xd0, 0x2d, 0xad, 0x47, 0x5b, 0xa6, 0x5d, 0xe2, 0x9f, 0xc6, 0x4b, 0xc3, 0x5b, 0x6c, 0xfa, 0xa4, 0x91, 0xc7, 0x5e, 0x10, 0xcc, 0x12, 0xbc, 0x39, 0xfa, 0xbc, 0xdd, 0x2d, 0x03, 0xd1, 0x3f, 0x39, 0xe7, 0x3f, 0x37, 0xb8, 0x2c, 0x2d, 0x4f, 0x80, 0x8e, 0xf2, 0x09, 0x8f, 0xd9, 0x21, 0xfc, 0xb6, 0x9e, 0xef, 0xf5, 0x59, 0x3b, 0x92, 0xa5, 0x13, 0x09, 0x43, 0x9a, 0xb3, 0x07, 0xe1, 0xf7, 0x60, 0x68, 0xf1, 0xa8, 0x62, 0xdc, 0xa0, 0x39, 0x9b, 0x7e, 0x63, 0x3f, 0x2f, 0x75, 0xe3, 0x9f, 0x97, 0xe7, 0x73, 0x28, 0x49, 0xef, 0xc6, 0x9f, 0x78, 0xa0, 0x4e, 0x93, 0x55, 0x5a, 0xdf, 0x8b, 0x8c, 0x5e, 0xa2, 0x78, 0xb7, 0x13, 0xe9, 0xc3, 0x22, 0x82, 0x64, 0x33, 0xe4, 0x15, 0x4b, 0x9f, 0xc2, 0x43, 0xd0, 0x9f, 0x4d, 0x71, 0xbd, 0xc2, 0x87, 0xaf, 0xd9, 0xb0, 0xb5, 0xa8, 0x61, 0xd1, 0x5b, 0x66, 0x96, 0x88, 0x21, 0x53, 0x2d, 0x5d, 0xbd, 0xb5, 0xe5, 0xe7, 0xa8, 0xe1, 0x52, 0xa2, 0xf2, 0xa1, 0xa6, 0x1e, 0xb1, 0xb4, 0x83, 0xe2, 0x5b, 0xf4, 0x6b, 0x2a, 0xf4, 0x15, 0xb1, 0xe1, 0xa7, 0x3c, 0x14, 0x94, 0x2c, 0x18, 0x94, 0x22, 0x14, 0x7f, 0xea, 0xab, 0xc4, 0xc5, 0x67, 0x95, 0xe5, 0x22, 0x86, 0xba, 0x07, 0x03, 0x49, 0xca, 0xc7, 0xbc, 0xfe, 0x58, 0x83, 0x71, 0xcf, 0xf1, 0x90, 0x7f, 0xdb, 0xbb, 0x4c, 0x2b, 0xb8, 0x6e, 0xee, 0xdc, 0x25, 0x0a, 0xf2, 0x77, 0xb8, 0x2e, 0xf6, 0xc8, 0x8a, 0xd0, 0xbf, 0x2c, 0x13, 0x8e, 0x83, 0xdb, 0x90, 0x3b, 0xf8, 0x32, 0xcc, 0xc8, 0xf9, 0xfd, 0xf9, 0x5e, 0x24, 0x45, 0x34, 0x2d, 0x8a, 0x9f, 0xef, 0xd5, 0x91, 0x47, 0x8d, 0x01, 0x11, 0x58, 0xcd, 0x2a, 0x99, 0xfd, 0xa4, 0xab, 0xba, 0xd1, 0x9e, 0x7c, 0x84, 0x0b, 0x58, 0x73, 0x66, 0xcd, 0xbe, 0x1c, 0x44, 0x30, 0xb4, 0x22, 0x8f, 0xe1, 0x48, 0xda, 0x96, 0xfe, 0x3b, 0x60, 0x68, 0x59, 0xe5, 0x4f, 0x4d, 0x9f, 0x89, 0x25, 0xe0, 0x77, 0x34, 0x8f, 0xe3, 0xb7, 0xc8, 0xd9},
		Y: make([]byte, 512),
	}
	return pub
}

func ImportPrivateKey() *enginev1.ElgamalPrivateKey {
	pub := &enginev1.ElgamalPrivateKey{
		PublicKey: ImportPublicKey(),
		X:         []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d},
	}
	return pub
}

func PlaceHolderPrivateKey() *enginev1.ElgamalPrivateKey {
	pub := &enginev1.ElgamalPrivateKey{
		PublicKey: PlaceHolderPublicKey(),
		X:         make([]byte, 512),
	}
	return pub
}
